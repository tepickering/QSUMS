%!PS-Adobe-2.0 EPSF-2.0
%%Title: tiltx.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Wed May 11 18:13:42 2005
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -40 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 120 scalefont setfont
1.000 UL
LTb
612 360 M
63 0 V
6321 0 R
-63 0 V
stroke
540 360 M
gsave 0 setgray
[ [(Helvetica) 120.0 0.0 true true 0 ( 250)]
] -40.0 MRshow
grestore
1.000 UL
LTb
612 1267 M
63 0 V
6321 0 R
-63 0 V
stroke
540 1267 M
gsave 0 setgray
[ [(Helvetica) 120.0 0.0 true true 0 ( 300)]
] -40.0 MRshow
grestore
1.000 UL
LTb
612 2174 M
63 0 V
6321 0 R
-63 0 V
stroke
540 2174 M
gsave 0 setgray
[ [(Helvetica) 120.0 0.0 true true 0 ( 350)]
] -40.0 MRshow
grestore
1.000 UL
LTb
612 3082 M
63 0 V
6321 0 R
-63 0 V
stroke
540 3082 M
gsave 0 setgray
[ [(Helvetica) 120.0 0.0 true true 0 ( 400)]
] -40.0 MRshow
grestore
1.000 UL
LTb
612 3989 M
63 0 V
6321 0 R
-63 0 V
stroke
540 3989 M
gsave 0 setgray
[ [(Helvetica) 120.0 0.0 true true 0 ( 450)]
] -40.0 MRshow
grestore
1.000 UL
LTb
612 4896 M
63 0 V
6321 0 R
-63 0 V
stroke
540 4896 M
gsave 0 setgray
[ [(Helvetica) 120.0 0.0 true true 0 ( 500)]
] -40.0 MRshow
grestore
1.000 UL
LTb
612 360 M
0 63 V
0 4473 R
0 -63 V
stroke
612 240 M
gsave 0 setgray
[ [(Helvetica) 120.0 0.0 true true 0 ( 20)]
] -40.0 MCshow
grestore
1.000 UL
LTb
1524 360 M
0 63 V
0 4473 R
0 -63 V
stroke
1524 240 M
gsave 0 setgray
[ [(Helvetica) 120.0 0.0 true true 0 ( 30)]
] -40.0 MCshow
grestore
1.000 UL
LTb
2436 360 M
0 63 V
0 4473 R
0 -63 V
stroke
2436 240 M
gsave 0 setgray
[ [(Helvetica) 120.0 0.0 true true 0 ( 40)]
] -40.0 MCshow
grestore
1.000 UL
LTb
3348 360 M
0 63 V
0 4473 R
0 -63 V
stroke
3348 240 M
gsave 0 setgray
[ [(Helvetica) 120.0 0.0 true true 0 ( 50)]
] -40.0 MCshow
grestore
1.000 UL
LTb
4260 360 M
0 63 V
0 4473 R
0 -63 V
stroke
4260 240 M
gsave 0 setgray
[ [(Helvetica) 120.0 0.0 true true 0 ( 60)]
] -40.0 MCshow
grestore
1.000 UL
LTb
5172 360 M
0 63 V
0 4473 R
0 -63 V
stroke
5172 240 M
gsave 0 setgray
[ [(Helvetica) 120.0 0.0 true true 0 ( 70)]
] -40.0 MCshow
grestore
1.000 UL
LTb
6084 360 M
0 63 V
0 4473 R
0 -63 V
stroke
6084 240 M
gsave 0 setgray
[ [(Helvetica) 120.0 0.0 true true 0 ( 80)]
] -40.0 MCshow
grestore
1.000 UL
LTb
6996 360 M
0 63 V
0 4473 R
0 -63 V
stroke
6996 240 M
gsave 0 setgray
[ [(Helvetica) 120.0 0.0 true true 0 ( 90)]
] -40.0 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
612 360 M
6384 0 V
0 4536 V
-6384 0 V
612 360 L
LTb
120 2628 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 120.0 0.0 true true 0 (Tilt X \(arcsec\))]
] -40.0 MCshow
grestore
grestore
LTb
3804 60 M
gsave 0 setgray
[ [(Helvetica) 120.0 0.0 true true 0 (Elevation \(deg\))]
] -40.0 MCshow
grestore
1.000 UP
1.000 UP
1.000 UL
LT0
LTb
6429 4773 M
gsave 0 setgray
("hecto.dat" using 1:2) Rshow
grestore
LT0
1794 4081 Pls
1794 4081 Pls
1779 4115 Pls
1779 4115 Pls
4510 2971 Pls
4510 2971 Pls
4518 3159 Pls
4518 3159 Pls
2737 4168 Pls
2763 4181 Pls
5966 2134 Pls
5986 2152 Pls
6695 1257 Pls
6673 1317 Pls
3383 3299 Pls
3373 3338 Pls
3622 3225 Pls
3613 3260 Pls
3312 3830 Pls
3324 3823 Pls
5683 1858 Pls
5665 1881 Pls
1924 4286 Pls
1932 4305 Pls
3042 3788 Pls
3047 3832 Pls
2961 3781 Pls
2937 3852 Pls
2098 3503 Pls
2117 3552 Pls
3081 3697 Pls
3084 3660 Pls
3086 3585 Pls
3218 2800 Pls
3195 2885 Pls
3435 3306 Pls
3415 3312 Pls
3404 3249 Pls
2693 3998 Pls
2712 3874 Pls
3810 2501 Pls
3791 2567 Pls
3748 3380 Pls
3770 3277 Pls
3805 3329 Pls
3823 3376 Pls
6388 1106 Pls
6369 1123 Pls
3354 3399 Pls
3365 3381 Pls
3418 3498 Pls
3435 3542 Pls
3477 3502 Pls
3498 3517 Pls
3551 3866 Pls
3575 3807 Pls
3616 3754 Pls
3636 3827 Pls
3684 3774 Pls
3703 3734 Pls
3742 3773 Pls
3761 3696 Pls
2617 3627 Pls
2629 3794 Pls
2650 3847 Pls
2684 3772 Pls
1303 4473 Pls
1341 4413 Pls
1445 4297 Pls
4185 2921 Pls
4179 2884 Pls
4511 3223 Pls
4523 3217 Pls
1596 4532 Pls
1623 4505 Pls
2706 4005 Pls
2725 3991 Pls
5133 2115 Pls
2333 3303 Pls
2315 3334 Pls
4574 2721 Pls
4592 2850 Pls
5069 2514 Pls
5074 2490 Pls
5457 2492 Pls
5476 2415 Pls
3265 3943 Pls
3284 3946 Pls
6294 1447 Pls
6278 1466 Pls
6332 1447 Pls
6315 1498 Pls
2369 3569 Pls
2348 3475 Pls
4262 3061 Pls
4298 3005 Pls
4056 2468 Pls
4038 2709 Pls
6491 1532 Pls
6471 1588 Pls
4624 2157 Pls
4602 2230 Pls
4542 2217 Pls
4520 2270 Pls
4499 2330 Pls
3989 2953 Pls
3957 2921 Pls
3947 2960 Pls
6709 1249 Pls
6693 1264 Pls
4956 2220 Pls
4937 2318 Pls
6343 1613 Pls
6324 1821 Pls
4620 3051 Pls
4599 2958 Pls
4030 2749 Pls
4021 2900 Pls
6570 826 Pls
6553 961 Pls
6535 968 Pls
4769 2039 Pls
4747 2086 Pls
5714 1724 Pls
5719 1803 Pls
5173 2003 Pls
5156 1958 Pls
4704 2602 Pls
4721 2758 Pls
4739 2656 Pls
6746 711 Pls
6733 708 Pls
4962 1626 Pls
4943 1664 Pls
1807 4279 Pls
1810 4052 Pls
1813 4251 Pls
1815 4183 Pls
1827 4158 Pls
1829 4367 Pls
1830 4492 Pls
1638 3994 Pls
1640 4050 Pls
1641 4316 Pls
1638 3994 Pls
1640 4050 Pls
1641 4316 Pls
5618 2218 Pls
5597 2335 Pls
5861 1908 Pls
5858 1727 Pls
5855 1767 Pls
6601 1248 Pls
6586 1607 Pls
6532 1443 Pls
6518 1455 Pls
3052 3491 Pls
3067 4036 Pls
3091 3938 Pls
4079 2964 Pls
5613 1866 Pls
5595 1924 Pls
5574 2051 Pls
4563 3075 Pls
4653 2731 Pls
4687 3419 Pls
5549 2128 Pls
5531 2028 Pls
5634 1771 Pls
5132 1995 Pls
5313 2289 Pls
5283 2177 Pls
5262 2010 Pls
3583 3283 Pls
4483 2300 Pls
6206 1169 Pls
4138 2155 Pls
5189 2480 Pls
5171 2271 Pls
5147 2097 Pls
3428 3443 Pls
3445 3591 Pls
5649 1622 Pls
4825 3095 Pls
5412 1102 Pls
5345 1846 Pls
5530 1518 Pls
5503 1209 Pls
3687 2182 Pls
6676 4773 Pls
1.000 UL
LT1
LTb
6429 4653 M
gsave 0 setgray
(g\(x,0\)) Rshow
grestore
LT1
6501 4653 M
351 0 V
1303 4319 M
55 -19 V
55 -19 V
55 -20 V
55 -21 V
55 -20 V
55 -21 V
55 -22 V
55 -22 V
55 -22 V
55 -22 V
55 -23 V
55 -24 V
55 -23 V
55 -24 V
55 -24 V
55 -25 V
55 -25 V
55 -25 V
55 -26 V
55 -26 V
55 -26 V
55 -27 V
55 -27 V
55 -27 V
55 -28 V
54 -28 V
55 -28 V
55 -29 V
55 -29 V
55 -29 V
55 -29 V
55 -30 V
55 -30 V
55 -31 V
55 -30 V
55 -31 V
55 -31 V
55 -32 V
55 -32 V
55 -32 V
55 -32 V
55 -33 V
55 -33 V
55 -33 V
55 -33 V
55 -34 V
55 -34 V
55 -34 V
55 -34 V
55 -35 V
55 -34 V
55 -35 V
55 -36 V
55 -35 V
55 -36 V
55 -36 V
55 -36 V
55 -36 V
55 -37 V
55 -36 V
55 -37 V
55 -37 V
55 -38 V
55 -37 V
55 -38 V
55 -37 V
54 -38 V
55 -38 V
55 -39 V
55 -38 V
55 -39 V
55 -38 V
55 -39 V
55 -39 V
55 -39 V
55 -40 V
55 -39 V
55 -40 V
55 -39 V
55 -40 V
55 -40 V
55 -40 V
55 -40 V
55 -40 V
55 -40 V
55 -40 V
55 -41 V
55 -40 V
55 -41 V
55 -40 V
55 -41 V
55 -41 V
55 -40 V
55 -41 V
55 -41 V
55 -41 V
55 -41 V
55 -41 V
55 -41 V
1.000 UL
LTb
612 360 M
6384 0 V
0 4536 V
-6384 0 V
612 360 L
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
